import 'dart:io';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:lms/apps/utils/customAppBar.dart';
import 'package:lms/apps/utils/custom_snackbar.dart';
import 'package:lms/apps/utils/loading_animation_widget.dart';
import 'package:lms/cubits/category/category_cubit.dart';
import 'package:lms/cubits/courses/course_cubit.dart';
import 'package:lms/models/category_model.dart';

class CourseFormScreen extends StatefulWidget {
  final Map<String, dynamic>? initialData;
  final bool isEdit;
  const CourseFormScreen({super.key, this.initialData, this.isEdit = false});

  @override
  State<CourseFormScreen> createState() => _CourseFormScreenState();
}

class _CourseFormScreenState extends State<CourseFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _categoryController = TextEditingController();
  final _levelController = TextEditingController();
  final _priceController = TextEditingController();
  final _discountPriceController = TextEditingController();
  final _tagsController = TextEditingController();
  XFile? _thumbnail;
  String? _thumbnailUrl;
  String _selectedLevel = 'C∆° b·∫£n';
  String _selectedLanguage = 'Ti·∫øng Vi·ªát';
  final List<String> _levels = ['C∆° b·∫£n', 'Trung b√¨nh', 'N√¢ng cao'];
  final List<String> _languages = [
    'Ti·∫øng Vi·ªát',
    'Ti·∫øng Anh',
    'Ti·∫øng Trung',
    'Ti·∫øng Nh·∫≠t',
    'Ti·∫øng H√†n',
    'Ti·∫øng Ph√°p',
    'Ti·∫øng ƒê·ª©c',
    'Ti·∫øng Nga',
    'Ti·∫øng T√¢y Ban Nha',
    'Ti·∫øng B·ªì ƒê√†o Nha',
    'Ti·∫øng √ù',
    'Ti·∫øng Th√°i',
    'Ti·∫øng Indonesia',
    'Ti·∫øng Malaysia',
    'Kh√°c',
  ];
  List<CourseCategory> _categories = [];
  int? _selectedCategoryId;
  String? _selectedCategoryName;

  @override
  void initState() {
    super.initState();
    if (widget.initialData != null) {
      final d = widget.initialData!;
      print('===== DEBUG: initialData =====');
      d.forEach((k, v) => print('$k: $v ([33m${v.runtimeType}[0m)'));
      print('==============================');
      _titleController.text = d['title']?.toString() ?? '';
      _descriptionController.text = d['description']?.toString() ?? '';
      _selectedCategoryId = null;
      if (d['category_id'] != null) {
        final dynamic raw = d['category_id'];
        if (raw is int) {
          _selectedCategoryId = raw;
        } else if (raw is String) {
          final parsed = int.tryParse(raw);
          if (parsed != null) _selectedCategoryId = parsed;
        } else {
          final parsed = int.tryParse(raw.toString());
          if (parsed != null) _selectedCategoryId = parsed;
        }
      }
      _selectedCategoryName = d['category_name']?.toString();
      _selectedLevel = d['level']?.toString() ?? 'C∆° b·∫£n';
      _selectedLanguage = d['language']?.toString() ?? 'Ti·∫øng Vi·ªát';
      _priceController.text = d['price']?.toString() ?? '';
      _discountPriceController.text = d['discount_price']?.toString() ?? '';
      _tagsController.text = d['tags']?.toString() ?? '';
      _thumbnailUrl =
          d['thumbnail_url']?.toString() ?? d['thumbnail']?.toString();
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _categoryController.dispose();
    _levelController.dispose();
    _priceController.dispose();
    _discountPriceController.dispose();
    _tagsController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final picked = await picker.pickImage(source: ImageSource.gallery);
    if (picked != null) {
      setState(() {
        _thumbnail = picked;
        _thumbnailUrl = null;
      });
    }
  }

  void _submit() async {
    if (_formKey.currentState?.validate() ?? false) {
      try {
        // L·∫•y UID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
        final currentUser = FirebaseAuth.instance.currentUser;
        if (currentUser == null) {
          throw Exception('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o kh√≥a h·ªçc');
        }

        // ƒê·∫£m b·∫£o _selectedCategoryId l√† int
        final int? categoryId =
            _selectedCategoryId is int
                ? _selectedCategoryId
                : int.tryParse(_selectedCategoryId.toString());
        if (categoryId == null) {
          throw Exception('Danh m·ª•c kh√¥ng h·ª£p l·ªá');
        }

        // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n API
        final Map<String, dynamic> apiData = {
          'title': _titleController.text.trim(),
          'description': _descriptionController.text.trim(),
          'category_id': categoryId,
          'level': _selectedLevel,
          'price': int.tryParse(_priceController.text.trim()) ?? 0,
          'discount_price':
              int.tryParse(_discountPriceController.text.trim()) ?? 0,
          'language': _selectedLanguage,
          'tags': _tagsController.text.trim(),
          'uid': currentUser.uid,
          'status': 'pending',
        };

        // Th√™m thumbnail n·∫øu c√≥
        if (_thumbnail != null) {
          apiData['thumbnail'] = File(_thumbnail!.path);
        }

        // Hi·ªÉn th·ªã loading dialog
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (context) => const Center(child: LoadingIndicator()),
        );

        if (widget.isEdit && widget.initialData != null) {
          final courseId =
              widget.initialData!['id'] ?? widget.initialData!['course_id'];
          await context.read<CourseCubit>().updateCourse(courseId, apiData);

          // ƒê√≥ng dialog loading
          if (context.mounted) {
            Navigator.of(context).pop(); // ƒê√≥ng dialog loading
            CustomSnackBar.showSuccess(
              context: context,
              message: 'ƒê√£ c·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng',
            );
            // Pop v·ªÅ m√†n h√¨nh tr∆∞·ªõc v√† truy·ªÅn true ƒë·ªÉ b√°o hi·ªáu c·∫ßn refresh
            Navigator.of(context).pop({'refresh': true});
          }
        } else {
          // T·∫°o kh√≥a h·ªçc m·ªõi
          await context.read<CourseCubit>().createCourse(apiData);

          // ƒê√≥ng dialog loading
          if (context.mounted) {
            Navigator.of(context).pop(); // ƒê√≥ng dialog loading
            CustomSnackBar.showSuccess(
              context: context,
              message: 'ƒê√£ t·∫°o kh√≥a h·ªçc m·ªõi th√†nh c√¥ng!',
            );
            // Pop v·ªÅ m√†n h√¨nh tr∆∞·ªõc v√† truy·ªÅn true ƒë·ªÉ b√°o hi·ªáu c·∫ßn refresh
            Navigator.of(context).pop({'refresh': true});
          }
        }
      } catch (e) {
        // ƒê√≥ng dialog loading n·∫øu ƒëang hi·ªÉn th·ªã
        if (context.mounted && Navigator.of(context).canPop()) {
          Navigator.of(context).pop();
        }

        // Hi·ªÉn th·ªã l·ªói
        if (context.mounted) {
          CustomSnackBar.showError(
            context: context,
            message: 'Kh√¥ng th·ªÉ l∆∞u kh√≥a h·ªçc: ${e.toString()}',
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    return Scaffold(
      appBar: CustomAppBar(
        title: widget.isEdit ? 'S·ª≠a kh√≥a h·ªçc' : 'Th√™m kh√≥a h·ªçc',
        showBack: true,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              colorScheme.surface,
              colorScheme.surfaceContainerHighest.withOpacity(0.3),
            ],
          ),
        ),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Thumbnail Section
                Center(
                  child: Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: colorScheme.shadow.withOpacity(0.1),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: GestureDetector(
                      onTap: _pickImage,
                      child: ClipRRect(
                        borderRadius: BorderRadius.circular(20),
                        child: Container(
                          height: 180,
                          width: 320,
                          decoration: BoxDecoration(
                            color: colorScheme.surfaceContainerHighest,
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child:
                              _thumbnail != null
                                  ? Image.file(
                                    File(_thumbnail!.path),
                                    fit: BoxFit.cover,
                                  )
                                  : (_thumbnailUrl != null &&
                                      _thumbnailUrl!.isNotEmpty)
                                  ? Image.network(
                                    _thumbnailUrl!,
                                    fit: BoxFit.cover,
                                    errorBuilder:
                                        (context, error, stackTrace) =>
                                            _buildThumbnailPlaceholder(
                                              colorScheme,
                                            ),
                                  )
                                  : Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Icon(
                                        Icons.add_a_photo,
                                        size: 48,
                                        color: colorScheme.primary,
                                      ),
                                      const SizedBox(height: 12),
                                      Text(
                                        'Th√™m ·∫£nh b√¨a kh√≥a h·ªçc',
                                        style: theme.textTheme.bodyLarge
                                            ?.copyWith(
                                              color:
                                                  colorScheme.onSurfaceVariant,
                                            ),
                                      ),
                                    ],
                                  ),
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 32),

                // Form Fields Section
                Container(
                  padding: const EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    color: colorScheme.surface,
                    borderRadius: BorderRadius.circular(24),
                    boxShadow: [
                      BoxShadow(
                        color: colorScheme.shadow.withOpacity(0.05),
                        blurRadius: 10,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Th√¥ng tin kh√≥a h·ªçc',
                        style: theme.textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: colorScheme.primary,
                        ),
                      ),
                      const SizedBox(height: 24),
                      _buildTextField(
                        _titleController,
                        'T√™n kh√≥a h·ªçc',
                        Icons.title,
                        validator:
                            (v) =>
                                v == null || v.isEmpty
                                    ? 'Nh·∫≠p t√™n kh√≥a h·ªçc'
                                    : null,
                      ),
                      const SizedBox(height: 20),
                      _buildTextField(
                        _descriptionController,
                        'M√¥ t·∫£',
                        Icons.description,
                        maxLines: 3,
                        validator:
                            (v) => v == null || v.isEmpty ? 'Nh·∫≠p m√¥ t·∫£' : null,
                      ),
                      const SizedBox(height: 20),
                      // Category Dropdown
                      BlocBuilder<CategoryCubit, CategoryState>(
                        builder: (context, state) {
                          if (state is CategoryLoading) {
                            return const Center(child: LoadingIndicator());
                          }
                          if (state is CategoryLoaded) {
                            _categories = state.categories;
                            if (_selectedCategoryId == null &&
                                _categories.isNotEmpty) {
                              _selectedCategoryId = _categories[0].categoryId;
                              _selectedCategoryName = _categories[0].name;
                            } else if (_selectedCategoryId != null &&
                                _categories.isNotEmpty) {
                              final found = _categories.where(
                                (c) => c.categoryId == _selectedCategoryId,
                              );
                              if (found.isEmpty) {
                                _selectedCategoryId = _categories[0].categoryId;
                                _selectedCategoryName = _categories[0].name;
                              }
                            }
                            return _buildDropdownField(
                              value: _selectedCategoryId,
                              items:
                                  _categories
                                      .map(
                                        (cat) => DropdownMenuItem(
                                          value: cat.categoryId,
                                          child: Text(cat.name),
                                        ),
                                      )
                                      .toList(),
                              onChanged: (value) {
                                if (value != null) {
                                  setState(() {
                                    _selectedCategoryId = value;
                                    final cat = _categories.firstWhere(
                                      (c) => c.categoryId == value,
                                      orElse: () => _categories[0],
                                    );
                                    _selectedCategoryName = cat.name;
                                  });
                                }
                              },
                              label: 'Danh m·ª•c',
                              icon: Icons.category,
                              validator:
                                  (v) => v == null ? 'Ch·ªçn danh m·ª•c' : null,
                            );
                          }
                          return const SizedBox();
                        },
                      ),
                      const SizedBox(height: 20),
                      // Level Dropdown
                      _buildDropdownField(
                        value: _selectedLevel,
                        items:
                            _levels
                                .map(
                                  (level) => DropdownMenuItem(
                                    value: level,
                                    child: Text(level),
                                  ),
                                )
                                .toList(),
                        onChanged: (value) {
                          if (value != null) {
                            setState(() {
                              _selectedLevel = value;
                            });
                          }
                        },
                        label: 'Tr√¨nh ƒë·ªô',
                        icon: Icons.leaderboard,
                        validator:
                            (v) =>
                                v == null || v.isEmpty ? 'Ch·ªçn tr√¨nh ƒë·ªô' : null,
                      ),
                      const SizedBox(height: 20),
                      // Price Fields
                      Row(
                        children: [
                          Expanded(
                            child: _buildTextField(
                              _priceController,
                              'Gi√°',
                              Icons.attach_money,
                              keyboardType: TextInputType.number,
                              validator:
                                  (v) =>
                                      v == null || v.isEmpty
                                          ? 'Nh·∫≠p gi√°'
                                          : null,
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: _buildTextField(
                              _discountPriceController,
                              'Gi√° KM',
                              Icons.discount,
                              keyboardType: TextInputType.number,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 20),
                      // Language Dropdown
                      _buildDropdownField(
                        value: _selectedLanguage,
                        items:
                            _languages
                                .map(
                                  (language) => DropdownMenuItem(
                                    value: language,
                                    child: Text(language),
                                  ),
                                )
                                .toList(),
                        onChanged: (value) {
                          if (value != null) {
                            setState(() {
                              _selectedLanguage = value;
                            });
                          }
                        },
                        label: 'Ng√¥n ng·ªØ',
                        icon: Icons.language,
                        validator:
                            (v) =>
                                v == null || v.isEmpty ? 'Ch·ªçn ng√¥n ng·ªØ' : null,
                      ),
                      const SizedBox(height: 20),
                      _buildTextField(
                        _tagsController,
                        'Tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)',
                        Icons.sell,
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 32),
                // Submit Button
                Container(
                  width: double.infinity,
                  height: 56,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: colorScheme.primary.withOpacity(0.3),
                        blurRadius: 8,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: ElevatedButton.icon(
                    icon: Icon(
                      widget.isEdit ? Icons.save : Icons.add,
                      size: 24,
                    ),
                    label: Text(
                      widget.isEdit ? 'L∆∞u thay ƒë·ªïi' : 'T·∫°o kh√≥a h·ªçc',
                      style: theme.textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: colorScheme.onPrimary,
                      ),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: colorScheme.primary,
                      foregroundColor: colorScheme.onPrimary,
                      elevation: 0,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16),
                      ),
                    ),
                    onPressed: _submit,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildThumbnailPlaceholder(ColorScheme colorScheme) {
    return Container(
      decoration: BoxDecoration(
        color: colorScheme.surfaceContainerHighest,
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.broken_image_outlined,
            size: 48,
            color: colorScheme.primary.withOpacity(0.7),
          ),
          const SizedBox(height: 12),
          Text(
            'Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh',
            style: TextStyle(fontSize: 14, color: colorScheme.onSurfaceVariant),
          ),
        ],
      ),
    );
  }

  Widget _buildDropdownField<T>({
    required T value,
    required List<DropdownMenuItem<T>> items,
    required ValueChanged<T?> onChanged,
    required String label,
    required IconData icon,
    String? Function(T?)? validator,
  }) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return DropdownButtonFormField<T>(
      value: value,
      items: items,
      onChanged: onChanged,
      validator: validator,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: colorScheme.primary),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: colorScheme.outline.withOpacity(0.5)),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: colorScheme.outline.withOpacity(0.5)),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: colorScheme.primary, width: 2),
        ),
        filled: true,
        fillColor: colorScheme.surface,
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      dropdownColor: colorScheme.surface,
      icon: Icon(Icons.arrow_drop_down, color: colorScheme.primary),
      style: theme.textTheme.bodyLarge?.copyWith(color: colorScheme.onSurface),
      borderRadius: BorderRadius.circular(16),
    );
  }

  Widget _buildTextField(
    TextEditingController controller,
    String label,
    IconData icon, {
    int maxLines = 1,
    TextInputType? keyboardType,
    String? Function(String?)? validator,
  }) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return TextFormField(
      controller: controller,
      maxLines: maxLines,
      minLines: 1,
      keyboardType: keyboardType,
      validator: validator,
      textAlignVertical: TextAlignVertical.top,
      style: theme.textTheme.bodyLarge?.copyWith(color: colorScheme.onSurface),
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: colorScheme.primary),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: colorScheme.outline.withOpacity(0.5)),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: colorScheme.outline.withOpacity(0.5)),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: colorScheme.primary, width: 2),
        ),
        filled: true,
        fillColor: colorScheme.surface,
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
        alignLabelWithHint: maxLines > 1,
      ),
    );
  }
}
