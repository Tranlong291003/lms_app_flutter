import 'dart:io';

import 'package:dio/dio.dart';
import 'package:lms/apps/config/api_config.dart';
import 'package:lms/models/lesson_model.dart';

import 'base_service.dart';

class LessonService extends BaseService {
  LessonService({super.token});

  Future<List<Lesson>> getAllLessons(int courseId, String userUid) async {
    final response = await get(
      ApiConfig.getLessonsByCourseAndUser(courseId, userUid),
    );
    if (response.statusCode == 200 && response.data['data'] is List) {
      return (response.data['data'] as List)
          .map((json) => Lesson.fromJson(json))
          .toList();
    }
    throw Exception('Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i h·ªçc');
  }

  /// L·∫•y chi ti·∫øt b√†i h·ªçc
  Future<Lesson> getLessonDetail(int lessonId) async {
    final response = await get(ApiConfig.getLessonDetail(lessonId));
    if (response.statusCode == 200 && response.data['data'] != null) {
      return Lesson.fromJson(response.data['data']);
    }
    throw Exception('Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt b√†i h·ªçc');
  }

  Future<void> completeLesson(
    int lessonId,
    String userUid,
    int courseId,
  ) async {
    try {
      // URL kh√¥ng c√≥ tham s·ªë
      final url = ApiConfig.completeLesson;
      print('========== COMPLETE LESSON REQUEST ==========');
      print('[LessonService] ‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu ƒë√°nh d·∫•u b√†i h·ªçc ho√†n th√†nh');
      print('[LessonService] üìù URL: $url');
      print('[LessonService] üìù Method: POST');
      print(
        '[LessonService] üìù Body: { "lessonId": $lessonId, "userUid": "$userUid", "courseId": $courseId }',
      );
      print('============================================');

      // Truy·ªÅn t·∫•t c·∫£ tham s·ªë trong body
      final response = await post(
        url,
        data: {'lessonId': lessonId, 'userUid': userUid, 'courseId': courseId},
        options: Options(contentType: Headers.jsonContentType),
      );

      print('========== COMPLETE LESSON RESPONSE ==========');
      print('[LessonService] ‚úÖ Response status: ${response.statusCode}');
      print('[LessonService] ‚úÖ Response data: ${response.data}');
      print('=============================================');

      if (response.statusCode == 200) {
        print('[LessonService] üéâ ƒê√°nh d·∫•u b√†i h·ªçc ho√†n th√†nh th√†nh c√¥ng');
      } else {
        print(
          '[LessonService] ‚ö†Ô∏è Response kh√¥ng th√†nh c√¥ng: ${response.statusCode}',
        );
        throw Exception(
          'ƒê√°nh d·∫•u b√†i h·ªçc kh√¥ng th√†nh c√¥ng: ${response.statusCode}',
        );
      }
    } on DioException catch (e) {
      print('========== COMPLETE LESSON ERROR ==========');
      print('[LessonService] ‚ùå DIO ERROR:');
      print('[LessonService] ‚ùå Status: ${e.response?.statusCode}');
      print('[LessonService] ‚ùå Message: ${e.message}');
      print('[LessonService] ‚ùå Data: ${e.response?.data}');
      print('[LessonService] ‚ùå Request: ${e.requestOptions.uri}');
      print('[LessonService] ‚ùå Headers: ${e.requestOptions.headers}');
      print('==========================================');
      throw Exception('L·ªói k·∫øt n·ªëi: ${e.message}');
    } catch (e) {
      print('========== COMPLETE LESSON ERROR ==========');
      print('[LessonService] ‚ùå UNEXPECTED ERROR:');
      print('[LessonService] ‚ùå Error: $e');
      print('==========================================');
      throw Exception('Kh√¥ng th·ªÉ ƒë√°nh d·∫•u b√†i h·ªçc ƒë√£ ho√†n th√†nh: $e');
    }
  }

  /// C·∫≠p nh·∫≠t b√†i h·ªçc
  Future<void> updateLesson({
    required int lessonId,
    required Map<String, dynamic> data,
    File? pdf,
    File? slide,
  }) async {
    Response response;
    if (pdf != null || slide != null) {
      final formData = FormData.fromMap({
        ...data,
        if (pdf != null)
          'pdf': await MultipartFile.fromFile(
            pdf.path,
            filename: pdf.path.split('/').last,
          ),
        if (slide != null)
          'slide': await MultipartFile.fromFile(
            slide.path,
            filename: slide.path.split('/').last,
          ),
      });
      response = await put(
        ApiConfig.updateLesson(lessonId),
        data: formData,
        options: Options(contentType: 'multipart/form-data'),
      );
    } else {
      response = await put(ApiConfig.updateLesson(lessonId), data: data);
    }
    if (response.statusCode != 200) {
      throw Exception('C·∫≠p nh·∫≠t b√†i h·ªçc th·∫•t b·∫°i');
    }
  }

  /// Xo√° b√†i h·ªçc
  Future<void> deleteLesson({
    required int lessonId,
    required String uid,
  }) async {
    final response = await delete(
      ApiConfig.deleteLesson(lessonId),
      data: {'uid': uid},
    );
    if (response.statusCode != 200) {
      throw Exception('X√≥a b√†i h·ªçc th·∫•t b·∫°i');
    }
  }

  /// G·ªçi API t·∫°o m·ªõi b√†i h·ªçc
  Future<void> createLesson({
    required int courseId,
    required String title,
    required String videoUrl,
    required String content,
    required int order,
    required String uid,
    File? pdf,
    File? slide,
  }) async {
    final formData = FormData.fromMap({
      'course_id': courseId,
      'title': title,
      'video_url': videoUrl,
      'content': content,
      'order': order,
      'uid': uid,
      if (pdf != null)
        'pdf': await MultipartFile.fromFile(
          pdf.path,
          filename: pdf.path.split('/').last,
        ),
      if (slide != null)
        'slide': await MultipartFile.fromFile(
          slide.path,
          filename: slide.path.split('/').last,
        ),
    });
    final response = await post(
      ApiConfig.createLesson,
      data: formData,
      options: Options(contentType: 'multipart/form-data'),
    );
    if (response.statusCode != 200 && response.statusCode != 201) {
      throw Exception('T·∫°o b√†i h·ªçc th·∫•t b·∫°i');
    }
  }
}
